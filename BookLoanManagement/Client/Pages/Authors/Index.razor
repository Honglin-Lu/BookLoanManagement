@page "/authors/"
@inject HttpClient _client
@inject IJSRuntime js
@implements IDisposable
@attribute [Authorize]


<h3 class="card-title">Book Authors</h3>
<hr />
<br />
<a href="/authors/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Author
</a>
<br />
<br />

@if (Authors == null)
{


    <div class="alert alert-info">Loading authors......</div>
}
else
{
    <table class="table" id="authorsTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var author in Authors)
            {
                <tr>
                    <td>@author.Name</td>
                    <td>
                        <a href="/authors/view/@author.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/authors/edit/@author.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(author.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {
    private List<Author> Authors;

    protected async override Task OnInitializedAsync()
    {
        Authors = await _client.GetFromJsonAsync<List<Author>>($"{Endpoints.AuthorsEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#authorsTable");
    }

    void IDisposable.Dispose()
    {
        js.InvokeVoidAsync("DataTableDispose", "#authorsTable");
    }

    async Task Delete(int authorId)
    {
        var author = Authors.First(q => q.Id == authorId);

        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {author.Name}?");
        @if (confirm)
        {

            await _client.DeleteAsync($"{Endpoints.AuthorsEndpoint}/{authorId}");
            await OnInitializedAsync();
        }


    }
}
