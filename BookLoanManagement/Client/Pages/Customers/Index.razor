@page "/customers/"
@inject HttpClient _client
@inject IJSRuntime js
@implements IDisposable
@attribute [Authorize]


<h3 class="card-title">Customers</h3>
<hr />
<br />
<a href="/customers/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Customer
</a>
<br />
<br />

@if (Customers == null)
{


    <div class="alert alert-info">Loading customers......</div>
}
else
{
    <table class="table" id="customersTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Phone</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Customers)
            {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Phone</td>
                    <td>@customer.Email</td>
                    <td>
                        <a href="/customers/view/@customer.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/customers/edit/@customer.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(customer.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {
    private List<Customer> Customers;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#customersTable");
    }

    void IDisposable.Dispose()
    {
        js.InvokeVoidAsync("DataTableDispose", "#customersTable");
    }

    async Task Delete(int customerId)
    {
        var customer = Customers.First(q => q.Id == customerId);

        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {customer.Name}?");
        @if (confirm)
        {

            await _client.DeleteAsync($"{Endpoints.CustomersEndpoint}/{customerId}");
            await OnInitializedAsync();
        }


    }
}
